name: Amber Loop
on:
  push:
    paths:
      - "server.py"
      - "amber_api.py"
      - ".github/workflows/amber-loop.yml"
      - "requirements.txt"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  loop:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Launch API
        env:
          DEV_SEED: dev-seed-change-me-32bytes________
          ISSUER_DID: did:web:openline.local
        run: |
          nohup uvicorn server:app --host 127.0.0.1 --port 8787 >/tmp/app.log 2>&1 &
          # Wait until health returns 200
          for i in {1..40}; do
            if curl -sf http://127.0.0.1:8787/health >/dev/null; then
              echo "API is up"; break
            fi
            sleep 0.5
          done
          curl -s http://127.0.0.1:8787/health; echo

      - name: Amber → Eval → Label → Promote
        env:
          BASE: http://127.0.0.1:8787
        run: |
          set -Eeuo pipefail

          echo "Capture Amber"
          AR_JSON=$(curl -sS -f "$BASE/api/amber/capture" \
            -H 'content-type: application/json' \
            --data '{"flags":["amber:unconfirmed"],"metrics":{"unconfirmed_ratio":0.42},"digests":{"claim_graph_hash":"x"}}' | tee /tmp/ar.json)
          AR=$(jq -er '.receipt.rid' /tmp/ar.json)
          echo "AR=$AR"

          echo "Eval"
          EVR_JSON=$(curl -sS -f "$BASE/api/amber/eval" \
            -H 'content-type: application/json' \
            --data "{\"parent\":\"$AR\",\"tests\":[{\"name\":\"consistency\",\"pass\":true}]}" | tee /tmp/evr.json)
          EVR=$(jq -er '.receipt.rid' /tmp/evr.json)
          echo "EVR=$EVR"

          echo "Label"
          LBR_JSON=$(curl -sS -f "$BASE/api/amber/label" \
            -H 'content-type: application/json' \
            --data "{\"parent\":\"$AR\",\"label\":{\"verdict\":\"correct\",\"reason_codes\":[\"retrieval-agreement↑\"]}}" | tee /tmp/lbr.json)
          LBR=$(jq -er '.receipt.rid' /tmp/lbr.json)
          echo "LBR=$LBR"

          echo "Promote"
          GPR_JSON=$(curl -sS -f "$BASE/api/amber/promote" \
            -H 'content-type: application/json' \
            --data "{\"parent\":\"$AR\",\"basis\":{\"label_ref\":\"$LBR\",\"eval_refs\":[\"$EVR\"]},\"policy_checks\":{\"pii\":\"pass\",\"consent\":\"pass\"}}" | tee /tmp/gpr.json)
          GPR=$(jq -er '.receipt.rid' /tmp/gpr.json)
          echo "GPR=$GPR"

      - name: Commit receipts to docs/
        if: always()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          mkdir -p docs/receipts/amber docs/receipts/eval docs/receipts/label docs/receipts/promote
          git add docs/receipts docs/receipt.latest.json || true
          git commit -m "chore(ci): publish latest receipt chain" || echo "nothing to commit"
          git push || echo "no push"

      - name: Warn if Amber without Gold
        run: |
          AMBER=$(ls docs/receipts/amber/*.json 2>/dev/null | wc -l || true)
          GOLD=$(ls docs/receipts/promote/*.json 2>/dev/null | wc -l || true)
          echo "Amber:$AMBER Gold:$GOLD"
          if [ "$AMBER" -gt 0 ] && [ "$GOLD" -eq 0 ]; then
            echo "::warning::Amber exists; training jobs must require Gold receipts"
          fi
